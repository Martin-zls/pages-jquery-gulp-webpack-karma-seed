{"version":3,"sources":["webpack:///jquery-menu.js","webpack:///./src/scripts/jquery-menu.js"],"names":["webpackJsonp","module","exports","__webpack_require__","jQuery","$","fn","menu","options","_opts","extend","defaults","_timer","_lastMenuItemID","_setMenuItemID","menuItem","data","_getMenuItemID","_getSubMenu","find","subMenuClass","first","_hideMenuItem","removeClass","visibleMenuItemClass","hide","_showMenuItem","addClass","show","this","each","menuItemClass","index","on","event","callback","clearTimeout","menuItemID","obj","element","length","is","document","elementFromPoint","clientX","clientY","setTimeout","delay","call"],"mappings":"AAAAA,cAAc,IAER,SAASC,EAAQC,EAASC,IAEH,SAASC,GAAS,cCD/C,SAAUC,GAQNA,EAAEC,GAAGC,KAAO,SAASC,GAQjB,GAAIC,GAAQJ,EAAEK,UAAWL,EAAEC,GAAGC,KAAKI,SAAUH,GAkBzCI,KASAC,EAAkB,EAQlBC,EAAiB,SAASC,GAC1BV,EAAEU,GAAUC,KAAK,YAAaH,IAU9BI,EAAiB,SAASF,GAC1B,MAAOV,GAAEU,GAAUC,KAAK,YAUxBE,EAAc,SAASH,GACvB,MAAOV,GAAEU,GAAUI,KAAK,IAAMV,EAAMW,cAAcC,SASlDC,EAAgB,SAASP,GACzBV,EAAEU,GAAUQ,YAAYd,EAAMe,sBAC9BN,EAAYH,GAAUU,QAStBC,EAAgB,SAASX,GACzBV,EAAEU,GAAUY,SAASlB,EAAMe,sBAC3BN,EAAYH,GAAUa,OAG1B,OAAOC,MAAKC,KAAK,WACb,GAAIvB,GAAOsB,IAEXxB,GAAEE,GAAMY,KAAK,IAAMV,EAAMsB,eAEpBD,KAAK,SAASE,EAAOjB,GAClBD,EAAeC,KAElBkB,GAAG,aAAc,SAASC,GACvB,GAAInB,GAAWc,IAGXjB,GAAOK,EAAeF,KAClBH,EAAOK,EAAeF,IAAWoB,SAAW,GAChDC,aAAaxB,EAAOK,EAAeF,IAAWoB,UANpB9B,EAU5ByB,KAAKlB,EAAQ,SAASyB,EAAYC,GAC5BD,IAAepB,EAAeF,IACe,IAAzCV,EAAEiC,EAAIC,SAASpB,KAAKJ,GAAUyB,QACW,IAAzCnC,EAAEU,GAAUI,KAAKmB,EAAIC,SAASC,QAClClB,EAAcgB,EAAIC,WAdIb,EAmBhBX,KACfkB,GAAG,aAAc,SAASC,GACzB,GAAInB,GAAWc,IAGXxB,GAAEE,GAAMkC,GAAGC,SAASC,iBAAiBT,EAAMU,QAASV,EAAMW,UAE1DvB,EAAcP,GAIdH,EAAOK,EAAeF,KAClBwB,QAASxB,EACToB,SAAUW,WAAW,WAEjBxB,EAAcP,IACfN,EAAMsC,aA9IxB1C,EA0JPC,GAAGC,KAAKI,UAONoC,MAAO,IAOP3B,aAAc,WAOdW,cAAe,YAOfP,qBAAsB,yBAE5BpB,KDE4B4C,KAAK9C,EAASC,EAAoB","file":"jquery-menu.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(jQuery) {'use strict';\n\t\n\t/**\n\t * @param {Object} $ The jQuery library\n\t */\n\t(function ($) {\n\t\n\t    /**\n\t     * Defines a jQuery object method called menu to initialize any menu on that selector.\n\t     *\n\t     * @param {Object} options (Optional)\n\t     * @return {Array|Object}\n\t     */\n\t    $.fn.menu = function (options) {\n\t\n\t        /**\n\t         * Extends default options with those provided.\n\t         *\n\t         * @type {Object}\n\t         * @private\n\t         */\n\t        var _opts = $.extend({}, $.fn.menu.defaults, options);\n\t\n\t        /**\n\t         * A container of menu items closing delays\n\t         * The key is the menu item ID and the value is an object as follows:\n\t         * {\n\t         *  menuItemID: {\n\t         *    element: menuItem,\n\t         *    callback: function\n\t         *  },\n\t         *  menuItem2ID: {\n\t         *    ...\n\t         *  }\n\t         * }\n\t         *\n\t         * @type {Object}\n\t         * @private\n\t         */\n\t        var _timer = {};\n\t\n\t        /**\n\t         * Keeps track of the last menu item ID. Each menu item ID is an incremental number.\n\t         *\n\t         * @type {number}\n\t         * @see _setMenuItemID\n\t         * @private\n\t         */\n\t        var _lastMenuItemID = 0;\n\t\n\t        /**\n\t         * Assigns a unique menu item ID via the \"data-menu-id\" attribute\n\t         *\n\t         * @param {Object} menuItem\n\t         * @private\n\t         */\n\t        var _setMenuItemID = function _setMenuItemID(menuItem) {\n\t            $(menuItem).data('menu-id', ++_lastMenuItemID);\n\t        };\n\t\n\t        /**\n\t         * Gets the identifier of the menu item\n\t         *\n\t         * @param {Object} menuItem\n\t         * @return {number}\n\t         * @private\n\t         */\n\t        var _getMenuItemID = function _getMenuItemID(menuItem) {\n\t            return $(menuItem).data('menu-id');\n\t        };\n\t\n\t        /**\n\t         * Finds the submenu of an menu item\n\t         *\n\t         * @param {Object} menuItem\n\t         * @return {Object} submenu of the menuItem\n\t         * @private\n\t         */\n\t        var _getSubMenu = function _getSubMenu(menuItem) {\n\t            return $(menuItem).find('.' + _opts.subMenuClass).first();\n\t        };\n\t\n\t        /**\n\t         * Removes the visible menu item CSS class to menuItem and hides its submenu\n\t         *\n\t         * @param {Object} menuItem\n\t         * @private\n\t         */\n\t        var _hideMenuItem = function _hideMenuItem(menuItem) {\n\t            $(menuItem).removeClass(_opts.visibleMenuItemClass);\n\t            _getSubMenu(menuItem).hide();\n\t        };\n\t\n\t        /**\n\t         * Adds the visible menu item CSS class to menuItem and shows its submenu\n\t         *\n\t         * @param {Object} menuItem\n\t         * @private\n\t         */\n\t        var _showMenuItem = function _showMenuItem(menuItem) {\n\t            $(menuItem).addClass(_opts.visibleMenuItemClass);\n\t            _getSubMenu(menuItem).show();\n\t        };\n\t\n\t        return this.each(function () {\n\t            var menu = this;\n\t\n\t            $(menu).find('.' + _opts.menuItemClass)\n\t            // Assigns unique IDs to all the menu items\n\t            .each(function (index, menuItem) {\n\t                _setMenuItemID(menuItem);\n\t            }).on('mouseenter', function (event) {\n\t                var menuItem = this;\n\t\n\t                // Prevents an immediate closing of the menu when the mouse goes out from the menu\n\t                if (_timer[_getMenuItemID(menuItem)] && _timer[_getMenuItemID(menuItem)].callback > 0) {\n\t                    clearTimeout(_timer[_getMenuItemID(menuItem)].callback);\n\t                }\n\t\n\t                // Hides all the submenus that are not parents or children of the current pointed item\n\t                $.each(_timer, function (menuItemID, obj) {\n\t                    if (menuItemID !== _getMenuItemID(menuItem) && $(obj.element).find(menuItem).length === 0 && $(menuItem).find(obj.element).length === 0) {\n\t                        _hideMenuItem(obj.element);\n\t                    }\n\t                });\n\t\n\t                // Shows the submenu\n\t                _showMenuItem(menuItem);\n\t            }).on('mouseleave', function (event) {\n\t                var menuItem = this;\n\t\n\t                // If the mouse points the menu container\n\t                if ($(menu).is(document.elementFromPoint(event.clientX, event.clientY))) {\n\t                    // Hides the submenu\n\t                    _hideMenuItem(menuItem);\n\t                } else {\n\t                    // The mouse is outside the menu container\n\t                    _timer[_getMenuItemID(menuItem)] = {\n\t                        element: menuItem,\n\t                        callback: setTimeout(function () {\n\t                            // Hides the submenu\n\t                            _hideMenuItem(menuItem);\n\t                        }, _opts.delay)\n\t                    };\n\t                }\n\t            });\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Plugin defaults - added as a property on our plugin function.\n\t     *\n\t     * @type {Object}\n\t     */\n\t    $.fn.menu.defaults = {\n\t\n\t        /**\n\t         * Delay (in milliseconds) of menu item closing\n\t         *\n\t         * @type {number}\n\t         */\n\t        delay: 300,\n\t\n\t        /**\n\t         * Class name of the submenu.\n\t         *\n\t         * @type {string}\n\t         */\n\t        subMenuClass: 'sub-menu',\n\t\n\t        /**\n\t         * Class name of the menu item.\n\t         *\n\t         * @type {string}\n\t         */\n\t        menuItemClass: 'menu-item',\n\t\n\t        /**\n\t         * Class name of the visible menu item.\n\t         *\n\t         * @type {string}\n\t         */\n\t        visibleMenuItemClass: 'is-menu-item-visible'\n\t    };\n\t})(jQuery);\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** jquery-menu.js\n **/","/**\n * @param {Object} $ The jQuery library\n */\n(function($) {\n\n    /**\n     * Defines a jQuery object method called menu to initialize any menu on that selector.\n     *\n     * @param {Object} options (Optional)\n     * @return {Array|Object}\n     */\n    $.fn.menu = function(options) {\n\n        /**\n         * Extends default options with those provided.\n         *\n         * @type {Object}\n         * @private\n         */\n        var _opts = $.extend({}, $.fn.menu.defaults, options);\n\n        /**\n         * A container of menu items closing delays\n         * The key is the menu item ID and the value is an object as follows:\n         * {\n         *  menuItemID: {\n         *    element: menuItem,\n         *    callback: function\n         *  },\n         *  menuItem2ID: {\n         *    ...\n         *  }\n         * }\n         *\n         * @type {Object}\n         * @private\n         */\n        var _timer = {};\n\n        /**\n         * Keeps track of the last menu item ID. Each menu item ID is an incremental number.\n         *\n         * @type {number}\n         * @see _setMenuItemID\n         * @private\n         */\n        var _lastMenuItemID = 0;\n\n        /**\n         * Assigns a unique menu item ID via the \"data-menu-id\" attribute\n         *\n         * @param {Object} menuItem\n         * @private\n         */\n        var _setMenuItemID = function(menuItem) {\n            $(menuItem).data('menu-id', ++_lastMenuItemID);\n        };\n\n        /**\n         * Gets the identifier of the menu item\n         *\n         * @param {Object} menuItem\n         * @return {number}\n         * @private\n         */\n        var _getMenuItemID = function(menuItem) {\n            return $(menuItem).data('menu-id');\n        };\n\n        /**\n         * Finds the submenu of an menu item\n         *\n         * @param {Object} menuItem\n         * @return {Object} submenu of the menuItem\n         * @private\n         */\n        var _getSubMenu = function(menuItem) {\n            return $(menuItem).find('.' + _opts.subMenuClass).first();\n        };\n\n        /**\n         * Removes the visible menu item CSS class to menuItem and hides its submenu\n         *\n         * @param {Object} menuItem\n         * @private\n         */\n        var _hideMenuItem = function(menuItem) {\n            $(menuItem).removeClass(_opts.visibleMenuItemClass);\n            _getSubMenu(menuItem).hide();\n        };\n\n        /**\n         * Adds the visible menu item CSS class to menuItem and shows its submenu\n         *\n         * @param {Object} menuItem\n         * @private\n         */\n        var _showMenuItem = function(menuItem) {\n            $(menuItem).addClass(_opts.visibleMenuItemClass);\n            _getSubMenu(menuItem).show();\n        };\n\n        return this.each(function() {\n            var menu = this;\n\n            $(menu).find('.' + _opts.menuItemClass)\n                // Assigns unique IDs to all the menu items\n                .each(function(index, menuItem) {\n                    _setMenuItemID(menuItem);\n                })\n                .on('mouseenter', function(event) {\n                    var menuItem = this;\n\n                    // Prevents an immediate closing of the menu when the mouse goes out from the menu\n                    if (_timer[_getMenuItemID(menuItem)] &&\n                            _timer[_getMenuItemID(menuItem)].callback > 0) {\n                        clearTimeout(_timer[_getMenuItemID(menuItem)].callback);\n                    }\n\n                    // Hides all the submenus that are not parents or children of the current pointed item\n                    $.each(_timer, function(menuItemID, obj) {\n                        if (menuItemID !== _getMenuItemID(menuItem) &&\n                                $(obj.element).find(menuItem).length === 0 &&\n                                $(menuItem).find(obj.element).length === 0) {\n                            _hideMenuItem(obj.element);\n                        }\n                    });\n\n                    // Shows the submenu\n                    _showMenuItem(menuItem);\n                }).on('mouseleave', function(event) {\n                    var menuItem = this;\n\n                    // If the mouse points the menu container\n                    if ($(menu).is(document.elementFromPoint(event.clientX, event.clientY))) {\n                        // Hides the submenu\n                        _hideMenuItem(menuItem);\n                    }\n                    else {\n                        // The mouse is outside the menu container\n                        _timer[_getMenuItemID(menuItem)] = {\n                            element: menuItem,\n                            callback: setTimeout(function() {\n                                // Hides the submenu\n                                _hideMenuItem(menuItem);\n                            }, _opts.delay)\n                        };\n                    }\n                });\n        });\n    };\n\n    /**\n     * Plugin defaults - added as a property on our plugin function.\n     *\n     * @type {Object}\n     */\n    $.fn.menu.defaults = {\n\n        /**\n         * Delay (in milliseconds) of menu item closing\n         *\n         * @type {number}\n         */\n        delay: 300,\n\n        /**\n         * Class name of the submenu.\n         *\n         * @type {string}\n         */\n        subMenuClass: 'sub-menu',\n\n        /**\n         * Class name of the menu item.\n         *\n         * @type {string}\n         */\n        menuItemClass: 'menu-item',\n\n        /**\n         * Class name of the visible menu item.\n         *\n         * @type {string}\n         */\n        visibleMenuItemClass: 'is-menu-item-visible'\n    };\n}(jQuery));\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/scripts/jquery-menu.js\n **/"],"sourceRoot":""}